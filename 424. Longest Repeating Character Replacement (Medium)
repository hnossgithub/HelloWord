/**
Given a string that consists of only uppercase English letters, you can replace any letter in the string with another letter at most k times. Find the length of a longest substring containing all repeating letters you can get after performing the above operations.

Note:
Both the string's length and k will not exceed 104.

Example 1:

Input:
s = "ABAB", k = 2

Output:
4

Explanation:
Replace the two 'A's with two 'B's or vice versa.
Example 2:

Input:
s = "AABABBA", k = 1

Output:
4

Explanation:
Replace the one 'A' in the middle with 'B' and form "AABBBBA".
The substring "BBBB" has the longest repeating letters, which is 4.
**/
public class Solution {
    public int characterReplacement(String s, int k) {
        if(s.length()==0 || k<0)   return 0;
        int[] map = new int[26];
        int maxCnt = 0, l = 0, r = 0, maxSubLen = 0;
        while(r<s.length()){
            /*map[r++]++;
              update maxCnt;
              if(maxCnt+k==r-l){
                  update maxSubLen;
                  continue;
              }
              while(l<r && maxCnt+k<r-l){
                  l++;
                  map[l]--;
                  update maxCnt;
              }
            */
            maxCnt = Math.max(maxCnt, ++map[s.charAt(r++)-'A']);
            if(maxCnt+k==r-l){
                maxSubLen = Math.max(maxSubLen, maxCnt+k);
                continue;
            }
            while(maxCnt+k<r-l && l<r){
                map[s.charAt(l++)-'A']--;
                maxCnt = 0;
                for(int c:map){
                    maxCnt = Math.max(maxCnt, c);
                }
            }
        }
        return maxCnt>maxSubLen?s.length():maxSubLen;//in case "AAAB" 2; "AAAA" 2
    }
}
