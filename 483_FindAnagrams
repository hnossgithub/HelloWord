/**
Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.

Example 1:

Input:
s: "cbaebabacd" p: "abc"

Output:
[0, 6]

Explanation:
The substring with start index = 0 is "cba", which is an anagram of "abc".
The substring with start index = 6 is "bac", which is an anagram of "abc".
Example 2:

Input:
s: "abab" p: "ab"

Output:
[0, 1, 2]

Explanation:
The substring with start index = 0 is "ab", which is an anagram of "ab".
The substring with start index = 1 is "ba", which is an anagram of "ab".
The substring with start index = 2 is "ab", which is an anagram of "ab".
**/

public class Solution {
    public List<Integer> findAnagrams(String s, String p) {
        if(s==null || p==null)  return null;
        int sLen = s.length();
        int pLen = p.length();
        int[] map = new int[26];
        for(int i=0;i<pLen;i++){
            map[p.charAt(i)-'a']++;
        }
        int start = 0;
        List<Integer> res = new LinkedList<>();
        while(sLen-start>=pLen){
            int[] dupMap = map.clone();
            int cur;
            for(cur=0;cur<pLen;cur++){
                if(--dupMap[s.charAt(start+cur)-'a']<0){
                    break;
                }
            }
            if(cur==pLen){
                res.add(start);
            }
            start++;
        }
        return res;
    }
}
