/**
Given an array of integers, find out whether there are two distinct indices i and j in the array such that the difference between nums[i] and nums[j] is at most t and the difference between i and j is at most k.
*/
public class Solution {
    public boolean containsNearbyAlmostDuplicate(int[] nums, int k, int t) {
        if(nums==null || nums.length<2 || k<=0) return false;
        TreeSet<Integer> treeSet = new TreeSet<>();
        for(int i=0;i<nums.length;i++){
            Integer floor = treeSet.floor(nums[i]+t); //get the greatest element which is less than or equal to the given element, return null if there is not such an element exist;
            Integer ceiling = treeSet.ceiling(nums[i]-t); //get the least element which is greater than or equal to the given element, return null if there is not such an element exist;
            if((floor!=null && floor>=nums[i]) || (ceiling!=null && ceiling<=nums[i])){
                return true;
            }
            treeSet.add(nums[i]);
            if(i>=k){
                treeSet.remove(nums[i-k]);
            }
        }
        return false;
    }
}
