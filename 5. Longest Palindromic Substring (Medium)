/**
Given a string S, find the longest palindromic substring in S. You may assume that the maximum length of S is 1000, and there exists one unique longest palindromic substring.

*/
public class Solution {
    public String longestPalindrome(String s) {
        if(s.length()<2)  return s;
        char[] cs = s.toCharArray();
        int start = 0;
        int maxLen = 1;
        for(int i=1;i<cs.length;i++){
            if(cs[i]==cs[i-1]){
                int gap = 1;
                while(i+gap-1<cs.length && i-gap>=0 && cs[i+gap-1]==cs[i-gap]){
                    gap++;
                }
                gap--;
                if(maxLen<gap*2){
                    start = i-gap;
                    maxLen = gap*2;
                }
            }
            if(i+1<cs.length && cs[i-1]==cs[i+1]){
                int gap = 1;
                while(i+gap<cs.length && i-gap>=0 && cs[i+gap]==cs[i-gap]){
                    gap++;
                }
                gap--;
                if(maxLen<gap*2+1){
                    start = i-gap;
                    maxLen = gap*2+1;
                }
            }
        }
        return s.substring(start,start + maxLen);
    }
}
